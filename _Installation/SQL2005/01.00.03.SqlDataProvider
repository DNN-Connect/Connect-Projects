/******* TABLES *******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_PTypes') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Projects_PTypes(
 [TypeId] [int] IDENTITY(1,1) NOT NULL,
 [TypeDescription] [nvarchar](100) NOT NULL,
 [TypeIcon] [nvarchar](20) NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Projects_PTypes PRIMARY KEY CLUSTERED 
(
 [TypeId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_Projects_ProjectTypes') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_Projects'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_Projects DROP CONSTRAINT FK_{objectQualifier}Connect_Projects_Projects_ProjectTypes
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes') AND type in (N'U'))
DROP TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes(
 [ProjectId] [int] NOT NULL,
 [TypeId] [int] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Projects_ProjectTypes PRIMARY KEY CLUSTERED 
(
 [ProjectId] ASC,
 [TypeId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_Projects
DROP COLUMN [ProjectTypeId]
GO


/******* STRUCTURE *******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_ProjectTypes_Projects') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Projects_ProjectTypes_Projects FOREIGN KEY([ProjectId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Projects_Projects ([ProjectId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_ProjectTypes_Projects') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes CHECK CONSTRAINT FK_{objectQualifier}Connect_Projects_ProjectTypes_Projects
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_ProjectTypes_PTypes') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Projects_ProjectTypes_PTypes FOREIGN KEY([TypeId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Projects_PTypes ([TypeId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_ProjectTypes_PTypes') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes CHECK CONSTRAINT FK_{objectQualifier}Connect_Projects_ProjectTypes_PTypes
GO


/******* VIEWS *******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Projects_Projects'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Projects_Projects
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Projects_Projects
AS
SELECT
 p.*,
 lt.TypeDescription LicenseType,
 lt.ProjectColor,
 uc.DisplayName AS CreatedByUser,
 um.DisplayName AS LastModifiedByUser
FROM {databaseOwner}{objectQualifier}Connect_Projects_Projects p
 INNER JOIN {databaseOwner}{objectQualifier}Connect_Projects_LicenseTypes lt ON p.LicenseTypeId=lt.LicenseTypeId
 LEFT JOIN {databaseOwner}{objectQualifier}Users uc ON uc.UserID = p.CreatedByUserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users um ON um.UserID = p.LastModifiedByUserID
GO

/******* DATA *******/
INSERT INTO {databaseOwner}{objectQualifier}Connect_Projects_PTypes ([TypeDescription], [TypeIcon]) VALUES ('Module', 'cubes');
INSERT INTO {databaseOwner}{objectQualifier}Connect_Projects_PTypes ([TypeDescription], [TypeIcon]) VALUES ('Theme', 'picture-o');
INSERT INTO {databaseOwner}{objectQualifier}Connect_Projects_PTypes ([TypeDescription], [TypeIcon]) VALUES ('Idea', 'lightbulb-o');
INSERT INTO {databaseOwner}{objectQualifier}Connect_Projects_PTypes ([TypeDescription], [TypeIcon]) VALUES ('Site', 'desktop');
INSERT INTO {databaseOwner}{objectQualifier}Connect_Projects_PTypes ([TypeDescription], [TypeIcon]) VALUES ('Provider', 'cog');
INSERT INTO {databaseOwner}{objectQualifier}Connect_Projects_PTypes ([TypeDescription], [TypeIcon]) VALUES ('Mobile', 'mobile');
INSERT INTO {databaseOwner}{objectQualifier}Connect_Projects_PTypes ([TypeDescription], [TypeIcon]) VALUES ('vNext', 'windows');
INSERT INTO {databaseOwner}{objectQualifier}Connect_Projects_PTypes ([TypeDescription], [TypeIcon]) VALUES ('MVC', 'cubes');
INSERT INTO {databaseOwner}{objectQualifier}Connect_Projects_PTypes ([TypeDescription], [TypeIcon]) VALUES ('Core', 'bullseye');

/******* SPROCS *******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_GetProjectTypeSelectionList') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Connect_Projects_GetProjectTypeSelectionList
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Connect_Projects_GetProjectTypeSelectionList
 @ProjectId INT
AS
SELECT
 t.*,
 ISNULL(pt.ProjectId, 0) Selected
FROM {databaseOwner}{objectQualifier}Connect_Projects_PTypes t
 LEFT JOIN {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes pt ON t.TypeId=pt.TypeId AND pt.ProjectId=@ProjectId
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_SetProjectTypes') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Connect_Projects_SetProjectTypes
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Connect_Projects_SetProjectTypes
 @ProjectId INT,
 @ProjectTypeIds VARCHAR(2000)
AS
DELETE FROM {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes
WHERE ProjectId=@ProjectId;
INSERT INTO {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes
 (ProjectId, TypeId)
SELECT
 @ProjectId,
 ids.RecordID
FROM
 {databaseOwner}{objectQualifier}SplitDelimitedIDs(@ProjectTypeIds, ',') ids
GO

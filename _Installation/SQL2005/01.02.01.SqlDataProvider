/******* Adding Tags *******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTags') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTags(
 [ProjectId] [int] NOT NULL,
 [TermId] [int] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Projects_ProjectTags PRIMARY KEY CLUSTERED 
(
 [ProjectId] ASC,
 [TermId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_ProjectTags_Projects') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTags'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTags  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Projects_ProjectTags_Projects FOREIGN KEY([ProjectId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Projects_Projects ([ProjectId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_ProjectTags_Projects') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTags'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTags CHECK CONSTRAINT FK_{objectQualifier}Connect_Projects_ProjectTags_Projects
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_ProjectTags_Taxonomy_Terms') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTags'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTags  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Projects_ProjectTags_Taxonomy_Terms FOREIGN KEY([TermId])
REFERENCES {databaseOwner}{objectQualifier}Taxonomy_Terms ([TermID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_ProjectTags_Taxonomy_Terms') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTags'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTags CHECK CONSTRAINT FK_{objectQualifier}Connect_Projects_ProjectTags_Taxonomy_Terms
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Projects_ProjectTags'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Projects_ProjectTags
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Projects_ProjectTags
AS
SELECT
 pt.ProjectId,
 t.*
FROM {databaseOwner}{objectQualifier}Connect_Projects_ProjectTags pt
 INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms t ON pt.TermId=t.TermID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_SetProjectTags') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Connect_Projects_SetProjectTags
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Connect_Projects_SetProjectTags
 @ProjectId INT,
 @ProjectTagIds VARCHAR(2000)
AS
DELETE FROM {databaseOwner}{objectQualifier}Connect_Projects_ProjectTags
WHERE ProjectId=@ProjectId;
INSERT INTO {databaseOwner}{objectQualifier}Connect_Projects_ProjectTags
 (ProjectId, TermId)
SELECT
 @ProjectId,
 ids.RecordID
FROM
 {databaseOwner}{objectQualifier}SplitDelimitedIDs(@ProjectTagIds, ',') ids
GO

/******* TABLES *******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_LicenseTypes') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Projects_LicenseTypes(
 [LicenseTypeId] [int] IDENTITY(1,1) NOT NULL,
 [TypeDescription] [nvarchar](300) NOT NULL,
 [ProjectColor] [varchar](10) NOT NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Projects_LicenseTypes PRIMARY KEY CLUSTERED 
(
 [LicenseTypeId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_Projects') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Projects_Projects(
 [ProjectId] [int] IDENTITY(1,1) NOT NULL,
 [ModuleId] [int] NOT NULL,
 [Visible] [bit] NOT NULL,
 [ProjectName] [nvarchar](1000) NOT NULL,
 [LicenseTypeId] [int] NOT NULL,
 [Status] [nvarchar](500) NULL,
 [Owners] [nvarchar](1000) NULL,
 [People] [nvarchar](1000) NULL,
 [Aims] [nvarchar](max) NULL,
 [Description] [nvarchar](max) NULL,
 [Dependencies] [nvarchar](max) NULL,
 [FirstImage] [varchar](50) NULL,
 [CreatedByUserID] [int] NOT NULL,
 [CreatedOnDate] [datetime] NOT NULL,
 [LastModifiedByUserID] [int] NOT NULL,
 [LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Projects_Projects PRIMARY KEY CLUSTERED 
(
 [ProjectId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes(
 [ProjectId] [int] NOT NULL,
 [TypeId] [int] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Projects_ProjectTypes PRIMARY KEY CLUSTERED 
(
 [ProjectId] ASC,
 [TypeId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_PTypes') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Projects_PTypes(
 [TypeId] [int] IDENTITY(1,1) NOT NULL,
 [TypeDescription] [nvarchar](100) NOT NULL,
 [TypeIcon] [nvarchar](20) NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Projects_PTypes PRIMARY KEY CLUSTERED 
(
 [TypeId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_Urls') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Projects_Urls(
 [UrlId] [int] IDENTITY(1,1) NOT NULL,
 [ProjectId] [int] NOT NULL,
 [Url] [nvarchar](500) NOT NULL,
 [Description] [nvarchar](1000) NULL,
 [UrlType] [int] NOT NULL,
 [IsDead] [bit] NOT NULL,
 [LastChange] [datetime] NULL,
 [LastChecked] [datetime] NULL,
 [Retries] [int] NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Projects_Urls PRIMARY KEY CLUSTERED 
(
 [UrlId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

/******* STRUCTURE *******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_Projects_LicenseTypes') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_Projects'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_Projects  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Projects_Projects_LicenseTypes FOREIGN KEY([LicenseTypeId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Projects_LicenseTypes ([LicenseTypeId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_Projects_LicenseTypes') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_Projects'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_Projects CHECK CONSTRAINT FK_{objectQualifier}Connect_Projects_Projects_LicenseTypes
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_Projects_Modules') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_Projects'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_Projects  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Projects_Projects_Modules FOREIGN KEY([ModuleId])
REFERENCES {databaseOwner}{objectQualifier}Modules ([ModuleID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_Projects_Modules') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_Projects'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_Projects CHECK CONSTRAINT FK_{objectQualifier}Connect_Projects_Projects_Modules
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_ProjectTypes_Projects') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Projects_ProjectTypes_Projects FOREIGN KEY([ProjectId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Projects_Projects ([ProjectId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_ProjectTypes_Projects') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes CHECK CONSTRAINT FK_{objectQualifier}Connect_Projects_ProjectTypes_Projects
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_ProjectTypes_PTypes') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Projects_ProjectTypes_PTypes FOREIGN KEY([TypeId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Projects_PTypes ([TypeId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_ProjectTypes_PTypes') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes CHECK CONSTRAINT FK_{objectQualifier}Connect_Projects_ProjectTypes_PTypes
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_Urls_Projects') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_Urls'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_Urls  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Projects_Urls_Projects FOREIGN KEY([ProjectId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Projects_Projects ([ProjectId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Projects_Urls_Projects') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_Urls'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Projects_Urls CHECK CONSTRAINT FK_{objectQualifier}Connect_Projects_Urls_Projects
GO

/******* TRIGGERS *******/
/******* VIEWS *******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Projects_Projects'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Projects_Projects
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Projects_Projects
AS
SELECT
 p.*,
 lt.TypeDescription LicenseType,
 lt.ProjectColor,
 uc.DisplayName AS CreatedByUser,
 um.DisplayName AS LastModifiedByUser,
 (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Connect_Projects_Urls u WHERE u.ProjectId=p.ProjectId AND u.IsDead=0) NrLiveLinks
FROM {databaseOwner}{objectQualifier}Connect_Projects_Projects p
 INNER JOIN {databaseOwner}{objectQualifier}Connect_Projects_LicenseTypes lt ON p.LicenseTypeId=lt.LicenseTypeId
 LEFT JOIN {databaseOwner}{objectQualifier}Users uc ON uc.UserID = p.CreatedByUserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users um ON um.UserID = p.LastModifiedByUserID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Projects_ProjectTypes'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Projects_ProjectTypes
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Projects_ProjectTypes
AS
SELECT
 pt.*,
 p.ProjectName,
 p.Visible,
 t.TypeDescription,
 t.TypeIcon
FROM {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes pt
 INNER JOIN {databaseOwner}{objectQualifier}Connect_Projects_Projects p ON pt.ProjectId=p.ProjectId
 INNER JOIN {databaseOwner}{objectQualifier}Connect_Projects_PTypes t ON pt.TypeId=t.TypeId
GO

/******* FUNCTIONS *******/
/******* SPROCS *******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_GetProjectTypeSelectionList') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Connect_Projects_GetProjectTypeSelectionList
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Connect_Projects_GetProjectTypeSelectionList
 @ProjectId INT
AS
SELECT
 t.*,
 ISNULL(pt.ProjectId, 0) Selected
FROM {databaseOwner}{objectQualifier}Connect_Projects_PTypes t
 LEFT JOIN {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes pt ON t.TypeId=pt.TypeId AND pt.ProjectId=@ProjectId
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Projects_SetProjectTypes') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Connect_Projects_SetProjectTypes
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Connect_Projects_SetProjectTypes
 @ProjectId INT,
 @ProjectTypeIds VARCHAR(2000)
AS
DELETE FROM {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes
WHERE ProjectId=@ProjectId;
INSERT INTO {databaseOwner}{objectQualifier}Connect_Projects_ProjectTypes
 (ProjectId, TypeId)
SELECT
 @ProjectId,
 ids.RecordID
FROM
 {databaseOwner}{objectQualifier}SplitDelimitedIDs(@ProjectTypeIds, ',') ids
GO

